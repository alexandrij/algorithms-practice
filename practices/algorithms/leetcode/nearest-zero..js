/**
 * Ближайши ноль
 *
 * Условие
 * Улица, на которой хочет жить Тимофей, имеет длину n, то есть состоит из n одинаковых идущих подряд участков. На каждом участке либо уже построен дом, либо участок пустой. Тимофей ищет место для строительства своего дома. Он очень общителен и не хочет жить далеко от других людей, живущих на этой улице.
 *
 * Чтобы оптимально выбрать место для строительства, Тимофей хочет для каждого участка знать расстояние до ближайшего пустого участка. (Для пустого участка эта величина будет равна нулю –— расстояние до самого себя).
 *
 * Ваша задача –— помочь Тимофею посчитать искомые расстояния. Для этого у вас есть карта улицы. Дома в городе Тимофея нумеровались в том порядке, в котором строились, поэтому их номера на карте никак не упорядочены. Пустые участки обозначены нулями.
 *
 * Формат ввода
 * В первой строке дана длина улицы —– n (1 ≤ n ≤ 106). В следующей строке записаны n целых неотрицательных чисел — номера домов и обозначения пустых участков на карте (нули). Гарантируется, что в последовательности есть хотя бы один нуль. Номера домов (положительные числа) уникальны и не превосходят 10^9.
 *
 * Формат вывода
 * Для каждого из участков выведите расстояние до ближайшего нуля. Числа выводите в одну строку, разделяя их пробелами.
 */

const nearestZero = (nums) => {
  if (nums.length < 1) return [];

  const len = nums.length;
  const best = new Array(len);

  best[0] = nums[0] === 0 ? 0 : len;
  best[len - 1] = nums[len - 1] === 0 ? 0 : len;

  for (let i = 1, j = len - 2; i < len; i++, j--) {
    best[i] = nums[i] === 0 ? 0 : Math.min(best[i - 1] + 1, best[i] || len);
    best[j] = nums[j] === 0 ? 0 : Math.min(best[j + 1] + 1, best[j] || len);
  }
  return best;
};

console.log(nearestZero([]));
console.log(nearestZero([0]));
console.log(nearestZero([0, 0]));
console.log(nearestZero([0, 0, 0, 0]));
console.log(nearestZero([1, 2, 3, 5, 6]));
console.log(nearestZero([0, 3]));
console.log(nearestZero([0, 1, 4, 9, 0]));
console.log(nearestZero([0, 1, 4, 9, 0, 0, 0, 3, 5, 7, 8, 0, 3, 0, 0]));
